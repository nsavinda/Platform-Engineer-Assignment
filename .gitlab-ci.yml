stages:
  - build
  - test
  - deploy

variables:
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/app"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"  # or use $CI_PIPELINE_ID
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/app"

build-job:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - echo "Building Docker image..."
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"
    - echo "container_image=$IMAGE_NAME:$IMAGE_TAG" > image_meta.txt

  artifacts:
    paths:
      - image_meta.txt


test-job:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - echo "Pulling and testing image..."
    - docker pull "$IMAGE_NAME:latest"
    - echo "Run tests here (unit, integration...)"

deploy-job:
  stage: deploy
  image:
    name: hashicorp/terraform:latest
    entrypoint: [""]
  script:
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - echo "Deploying app with Terraform..."
    - cd terraform
    - cat ../image_meta.txt
    - source ../image_meta.txt
    - terraform init
    - terraform plan -out=tfplan -var="container_image=$container_image" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="ci_user=$CI_REGISTRY_USER" -var="ci_password=$CI_REGISTRY_PASSWORD" -var="ci_registry=$CI_REGISTRY"
    - terraform apply -auto-approve tfplan
